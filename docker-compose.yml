# Definición de la versión del archivo Docker Compose
version: '3.8'

services:
  # Servicio DuckDNS para gestionar un nombre de dominio dinámico
  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    environment:
      - PUID=1000        # ID de usuario para permisos
      - PGID=1000        # ID de grupo para permisos
      - TZ=Europe/Madrid # Zona horaria
      - SUBDOMAINS=subdomain1, subdomain2  # Subdominio configurado
      - TOKEN=token-generate  # Token de autenticación
      - UPDATE_IP=ipv4   # Tipo de IP para actualizar (IPv4)
      - LOG_FILE=false   # Deshabilita el archivo de log
    volumes:
      - ./duckdns:/config  # Directorio local para configuración
    restart: unless-stopped  # Reinicia a menos que se detenga manualmente

  # Servicio WG-Easy para configurar y administrar VPN WireGuard
  wg-easy:
    image: ghcr.io/wg-easy/wg-easy
    container_name: wg-easy
    environment:
      - LANG=en_US  # Configuración regional
      - WG_HOST=PublicIp-Domain  # Host del servicio VPN
      - PASSWORD=password  # Contraseña para el panel de administración
    volumes:
      - ./wg-easy:/etc/wireguard  # Configuración de WireGuard
    ports:
      - 51820:51820/udp  # Puerto UDP para el túnel VPN
      - 51821:51821/tcp  # Puerto TCP para administración
    cap_add:
      - NET_ADMIN  # Permisos de administración de red
      - SYS_MODULE # Permisos para cargar módulos del sistema
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1  # Configuración de IPv4
      - net.ipv4.ip_forward=1  # Permite reenviar tráfico IPv4
    restart: unless-stopped

  # Servicio Heimdall, una página de inicio para tus aplicaciones web
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - ./heimdall:/config  # Directorio local para configuración
    ports:
      - 80:80  # Puerto HTTP
      - 443:443  # Puerto HTTPS
    restart: unless-stopped

  # Portainer para administrar contenedores y servicios Docker
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always  # Reinicia automáticamente si se detiene
    ports:
      - "8000:8000"  # Puerto para el agente
      - "9443:9443"  # Puerto para la UI de administración
    volumes:
      # Monta el socket de Docker para acceder al servidor Docker desde Portainer
      - /var/run/docker.sock:/var/run/docker.sock
      # Volumen para persistir los datos de Portainer
      - ./portainer:/config

  # Node Exporter - Recopilación de métricas del sistema
  node_exporter:
    image: prom/node-exporter:latest
    restart: always
    container_name: node_exporter
    ports:
      - "9100:9100"  # Puerto para las métricas
    volumes:
      # Volumen para la configuración del Node Exporter
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - node_exporter_config:/etc/node_exporter

  # Prometheus para recopilar y monitorear métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"  # Puerto para acceder al panel de Prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'  # Archivo de configuración

  # Grafana - Herramienta de visualización de métricas
  grafana:
    image: grafana/grafana:latest
    restart: always
    container_name: grafana
    ports:
      - "3000:3000"  # Puerto para acceder al panel de Grafana
    volumes:
      # Volumen para persistir los datos de Grafana
      - grafana_data:/var/lib/grafana
      - /etc/localtime:/etc/localtime

# Definición de volúmenes
volumes:
  node_exporter_config:  # Configuración de Node Exporter
  prometheus_data:  # Almacén de datos de Prometheus
  grafana_data:  # Almacén de datos de Grafana
